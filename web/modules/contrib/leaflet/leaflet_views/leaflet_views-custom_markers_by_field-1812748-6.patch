diff --git c/leaflet_views/leaflet_views_plugin_style.inc w/leaflet_views/leaflet_views_plugin_style.inc
index e682ab1..116e3e3 100644
--- c/leaflet_views/leaflet_views_plugin_style.inc
+++ w/leaflet_views/leaflet_views_plugin_style.inc
@@ -48,11 +48,18 @@ class leaflet_views_plugin_style extends views_plugin_style {
 
     $fields = array();
     $fields_data = array();
+    $image_fields = array();
+
     foreach ($handlers as $field_id => $handler) {
       $fields[$field_id] = $handler->ui_name();
 
-      if (!empty($handler->field_info['type']) && $handler->field_info['type'] == 'geofield') {
-        $fields_data[$field_id] = $handler->ui_name();
+      if (!empty($handler->field_info['type'])) {
+        if($handler->field_info['type'] == 'geofield') {
+          $fields_data[$field_id] = $handler->ui_name();
+        }
+        if($handler->field_info['type'] == 'image') {
+          $image_fields[$field_id] = $handler->ui_name();
+        }
       }
     }
 
@@ -157,34 +164,82 @@ class leaflet_views_plugin_style extends views_plugin_style {
       '#title' => t('Map Icon'),
       '#type' => 'fieldset',
       '#collapsible' => TRUE,
-      '#collapsed' => !isset($this->options['icon']['iconUrl']),
+      '#collapsed' => !isset($this->options['icon']['custom']['settings']['iconUrl']),
     );
 
-    $form['icon']['iconUrl'] = array(
+    if (count($image_fields)) {
+      $form['icon']['multipleIcons'] = array(
+        '#type' => 'checkbox',
+        '#title' => t('Multiple Map icons.'),
+        '#default_value' => $this->options['icon']['multipleIcons'],
+      );
+
+      $form['icon']['multiple']['settings'] = array(
+        '#type' => 'container',
+        '#states' => array(
+          'invisible' => array(
+           ':input[name="style_options[icon][multipleIcons]"]' => array('checked' => FALSE),
+          ),
+        ),
+      );
+
+      $form['icon']['multiple']['settings']['icon'] = array(
+        '#title' => t('Icon Field'),
+        '#description' => t('An image field to be used as an Icon.'),
+        '#type' => 'select',
+        '#options' => $image_fields,
+        '#default_value' => $this->options['icon']['multiple']['settings']['icon'],
+        '#states' => array(
+          'required' => array(
+           ':input[name="style_options[icon][multipleIcons]"]' => array('checked' => TRUE),
+          ),
+        ),
+      );
+
+      $form['icon']['multiple']['settings']['shadow'] = array(
+        '#title' => t('Icon Shadow Field'),
+        '#description' => t('An image field to be used as the Icon shadow.'),
+        '#type' => 'select',
+        '#options' => $image_fields,
+        '#empty_value' => '',
+        '#default_value' => $this->options['icon']['multiple']['settings']['shadow'],
+      );
+
+      $form['icon']['custom']['settings'] = array(
+        '#type' => 'container',
+        '#states' => array(
+          'visible' => array(
+           ':input[name="style_options[icon][multipleIcons]"]' => array('checked' => FALSE),
+          ),
+        ),
+      );
+    }
+
+    $form['icon']['custom']['settings']['iconUrl'] = array(
       '#title' => t('Icon URL'),
       '#description' => t('Can be an absolute or relative URL.'),
       '#type' => 'textfield',
       '#maxlength' => 999,
-      '#default_value' => isset($this->options['icon']['iconUrl']) ? $this->options['icon']['iconUrl'] : '',
+      '#default_value' => isset($this->options['icon']['custom']['settings']['iconUrl']) ? $this->options['icon']['custom']['settings']['iconUrl'] : '',
       '#element_validate' => array('leaflet_icon_validate')
     );
 
-    $form['icon']['shadowUrl'] = array(
+    $form['icon']['custom']['settings']['shadowUrl'] = array(
       '#title' => t('Icon Shadow URL'),
       '#type' => 'textfield',
       '#maxlength' => 999,
-      '#default_value' => isset($this->options['icon']['shadowUrl']) ? $this->options['icon']['shadowUrl'] : '',
+      '#default_value' => isset($this->options['icon']['custom']['settings']['shadowUrl']) ? $this->options['icon']['custom']['settings']['shadowUrl'] : '',
       '#element_validate' => array('leaflet_icon_validate')
     );
 
-    $form['icon']['iconSize'] = array(
+    $form['icon']['custom']['settings']['iconSize'] = array(
       '#title' => t('Icon Size'),
       '#type' => 'fieldset',
       '#collapsible' => FALSE,
       '#description' => t('Size of the icon image in pixels.')
     );
 
-    $form['icon']['iconSize']['x'] = array(
+    $form['icon']['custom']['settings']['iconSize']['x'] = array(
       '#title' => t('Width'),
       '#type' => 'textfield',
       '#maxlength' => 3,
@@ -193,12 +248,12 @@ class leaflet_views_plugin_style extends views_plugin_style {
       '#element_validate' => array('element_validate_integer_positive'),
     );
 
-    $form['icon']['iconSize']['y'] = array(
+    $form['icon']['custom']['settings']['iconSize']['y'] = array(
       '#title' => t('Height'),
       '#type' => 'textfield',
       '#maxlength' => 3,
       '#size' => 3,
-      '#default_value' => isset($this->options['icon']['iconSize']['y']) ? $this->options['icon']['iconSize']['y'] : '',
+      '#default_value' => isset($this->options['icon']['custom']['settings']['iconSize']['y']) ? $this->options['icon']['custom']['settings']['iconSize']['y'] : '',
       '#element_validate' => array('element_validate_integer_positive'),
     );
 
@@ -299,6 +354,8 @@ class leaflet_views_plugin_style extends views_plugin_style {
       $this->render_fields($this->view->result);
       foreach ($this->view->result as $id => $result) {
         $geofield = $this->get_field_value($id, $this->options['data_source']);
+        $multi_icons = (!empty($this->options['icon']['multiple']));
+        $iconfield = (!empty($this->options['icon']['multiple']['settings']['icon']));
 
         if (!empty($geofield)) {
           $points = leaflet_process_geofield($geofield);
@@ -328,11 +385,39 @@ class leaflet_views_plugin_style extends views_plugin_style {
 
           $data = array_merge($data, $points);
 
-          if (!empty($this->options['icon']) && $this->options['icon']['iconUrl']) {
-            foreach ($data as $key => $feature) {
-              $data[$key]['icon'] = $this->options['icon'];
+          // Get list of fields in this view & flag available image fields in
+          // order to prevent WSOD if this field was removed.
+          $handlers = $this->display->handler->get_handlers('field');
+
+          $image_fields = array();
+
+          foreach ($handlers as $field_id => $handler) {
+            if (!empty($handler->field_info['type']) && $handler->field_info['type'] == 'image') {
+                $image_fields[$field_id] = $handler->ui_name();
+            }
+          }
+
+          if (!empty($image_fields) && $multi_icons && $iconfield) {
+
+            $icon = $this->get_field_value($id, $this->options['icon']['multiple']['settings']['icon']);
+            $shadow = (!empty($this->options['icon']['multiple']['settings']['shadow'])) ? $this->get_field_value($id, $this->options['icon']['multiple']['settings']['shadow']) : '';
+
+            if (!empty($icon)) {
+              $iconSettings['iconUrl'] = file_create_url($icon[0]['uri']);
+              $iconSettings['iconSize'] = array(
+                'x' => $icon[0]['width'],
+                'y' => $icon[0]['height']
+              );
+              if (!empty($shadow)) {
+                $iconSettings['shadowUrl'] = file_create_url($shadow[0]['uri']);
+              }
+
+              $data[$id]['icon'] = $iconSettings;
             }
           }
+          elseif (!empty($this->options['icon']['custom']['settings']['iconUrl'])) {
+           $data[$id]['icon'] = $this->options['icon']['custom']['settings'];
+          }
         }
       }
 
